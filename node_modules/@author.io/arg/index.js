// @author.io/arg v1.3.23
// Copyright (c) 2022 Corey Butler
// Released under the MIT License.
function _classPrivateFieldGet(receiver,privateMap){return function _classApplyDescriptorGet(receiver,descriptor){return descriptor.get?descriptor.get.call(receiver):descriptor.value}(receiver,_classExtractFieldDescriptor(receiver,privateMap,"get"))}function _classPrivateFieldSet(receiver,privateMap,value){return function _classApplyDescriptorSet(receiver,descriptor,value){if(descriptor.set)descriptor.set.call(receiver,value);else{if(!descriptor.writable)throw new TypeError("attempted to set read only private field");descriptor.value=value}}(receiver,_classExtractFieldDescriptor(receiver,privateMap,"set"),value),value}function _classExtractFieldDescriptor(receiver,privateMap,action){if(!privateMap.has(receiver))throw new TypeError("attempted to "+action+" private field on non-instance");return privateMap.get(receiver)}var _name=new WeakMap,_rawName=new WeakMap,_description=new WeakMap,_default=new WeakMap,_alias=new WeakMap,_required=new WeakMap,_type=new WeakMap,_allowMultipleValues=new WeakMap,_strictTypes=new WeakMap,_enum=new WeakMap,_value=new WeakMap,_violations$1=new WeakMap,_recognized=new WeakMap,_validator=new WeakMap;class Flag{constructor(cfg={}){if(_name.set(this,{writable:!0,value:void 0}),_rawName.set(this,{writable:!0,value:void 0}),_description.set(this,{writable:!0,value:void 0}),_default.set(this,{writable:!0,value:null}),_alias.set(this,{writable:!0,value:new Set}),_required.set(this,{writable:!0,value:!1}),_type.set(this,{writable:!0,value:String}),_allowMultipleValues.set(this,{writable:!0,value:!1}),_strictTypes.set(this,{writable:!0,value:!0}),_enum.set(this,{writable:!0,value:new Set}),_value.set(this,{writable:!0,value:null}),_violations$1.set(this,{writable:!0,value:new Set}),_recognized.set(this,{writable:!0,value:!1}),_validator.set(this,{writable:!0,value:null}),"string"==typeof cfg&&(cfg={name:cfg}),!cfg.name)throw new Error("Flag name is required.");if(_classPrivateFieldSet(this,_rawName,cfg.name),_classPrivateFieldSet(this,_name,cfg.name),cfg.hasOwnProperty("description")&&_classPrivateFieldSet(this,_description,cfg.description),cfg.hasOwnProperty("default")&&_classPrivateFieldSet(this,_default,cfg.default),cfg.hasOwnProperty("alias")&&this.createAlias(cfg.alias),cfg.hasOwnProperty("aliases")&&this.createAlias(cfg.aliases),cfg.hasOwnProperty("required")&&_classPrivateFieldSet(this,_required,cfg.required),cfg.hasOwnProperty("type")?this.type=cfg.type:cfg.hasOwnProperty("default")&&_classPrivateFieldGet(this,_default)&&(this.type=typeof _classPrivateFieldGet(this,_default)),cfg.hasOwnProperty("allowMultipleValues")&&_classPrivateFieldSet(this,_allowMultipleValues,cfg.allowMultipleValues),cfg.hasOwnProperty("strictTypes")&&_classPrivateFieldSet(this,_strictTypes,cfg.strictTypes),cfg.hasOwnProperty("options")&&(this.options=cfg.options),cfg.hasOwnProperty("validate")){if(!(cfg.validate instanceof RegExp||"function"==typeof cfg.validate))throw new Error(`The "validate" configuration attribute for ${_classPrivateFieldGet(this,_rawName)} is invalid. Only RegExp and functions are supported (received ${typeof cfg.validate})`);_classPrivateFieldSet(this,_validator,cfg.validate)}}get inputName(){return _classPrivateFieldGet(this,_rawName)}get recognized(){return _classPrivateFieldGet(this,_recognized)}set recognized(value){_classPrivateFieldSet(this,_recognized,value)}get required(){return _classPrivateFieldGet(this,_required)}set required(value){_classPrivateFieldSet(this,_required,value)}get valid(){const value=this.value;if(_classPrivateFieldSet(this,_violations$1,new Set),_classPrivateFieldGet(this,_required)&&(_classPrivateFieldGet(this,_allowMultipleValues)?0===this.value.length:null===this.value))return _classPrivateFieldSet(this,_violations$1,new Set([`"${_classPrivateFieldGet(this,_name)}" is required.`])),!1;if(_classPrivateFieldGet(this,_enum).size>0)if(_classPrivateFieldGet(this,_allowMultipleValues)){const invalid=value.filter(item=>!_classPrivateFieldGet(this,_enum).has(item));if(invalid.length>0)return invalid.forEach(v=>_classPrivateFieldGet(this,_violations$1).add(`"${v}" is invalid. Expected one of: ${Array.from(_classPrivateFieldGet(this,_enum)).join(", ")}`)),!1}else if(!_classPrivateFieldGet(this,_enum).has(value))return _classPrivateFieldGet(this,_violations$1).add(`"${value}" is invalid. Expected one of: ${Array.from(_classPrivateFieldGet(this,_enum)).join(", ")}`),!1;if(_classPrivateFieldGet(this,_strictTypes)){const type=this.type;if("any"!==type&&"*"!==type&&this.recognized)if(_classPrivateFieldGet(this,_allowMultipleValues)){const invalidTypes=value.filter(item=>typeof item!==type);if(invalidTypes.length>0)return invalidTypes.forEach(v=>_classPrivateFieldGet(this,_violations$1).add(`"${this.name}" (${v}) should be a ${type}, not ${typeof v}.`)),!1}else if(null!==value&&typeof value!==type)return _classPrivateFieldGet(this,_violations$1).add(`"${this.name}" should be a ${type}, not ${typeof value}.`),!1}if(null!==_classPrivateFieldGet(this,_validator))if("function"==typeof _classPrivateFieldGet(this,_validator)){if(!_classPrivateFieldGet(this,_validator).call(this,value))return _classPrivateFieldGet(this,_violations$1).add(`"${value}" is invalid (failed custom validation).`),!1}else{if("string"!=typeof value&&_classPrivateFieldGet(this,_validator)instanceof RegExp)return _classPrivateFieldGet(this,_violations$1).add(`"${value}" is invalid (failed custom validation).`),!1;if(!_classPrivateFieldGet(this,_validator).test(value))return _classPrivateFieldGet(this,_violations$1).add(`"${value}" is invalid (failed custom validation).`),!1}return!0}get violations(){return this.valid?[]:Array.from(_classPrivateFieldGet(this,_violations$1))}get type(){return _classPrivateFieldGet(this,_type).name.split(/\s+/)[0].toLowerCase()}set type(value){if("string"==typeof value)switch(value.trim().toLowerCase()){case"number":case"integer":case"float":case"double":_classPrivateFieldSet(this,_type,Number);break;case"bigint":_classPrivateFieldSet(this,_type,BigInt);break;case"boolean":_classPrivateFieldSet(this,_type,Boolean);break;default:_classPrivateFieldSet(this,_type,String)}else _classPrivateFieldSet(this,_type,value)}get strictTypes(){return _classPrivateFieldGet(this,_strictTypes)}set strictTypes(value){if("boolean"!=typeof value)throw new Error("strictTypes must be a boolean value.");_classPrivateFieldSet(this,_strictTypes,value)}get name(){return _classPrivateFieldGet(this,_name)}set name(value){_classPrivateFieldSet(this,_name,value.trim())}get description(){return _classPrivateFieldGet(this,_name)}set description(value){_classPrivateFieldSet(this,_description,value.trim())}get value(){if(_classPrivateFieldGet(this,_allowMultipleValues)&&null===_classPrivateFieldGet(this,_value)){if(null===_classPrivateFieldGet(this,_default))return[];if(!Array.isArray(_classPrivateFieldGet(this,_default)))return[_classPrivateFieldGet(this,_default)]}return _classPrivateFieldGet(this,_value)||_classPrivateFieldGet(this,_default)}set value(value){if(_classPrivateFieldGet(this,_allowMultipleValues)){if(Array.isArray(value))return void _classPrivateFieldSet(this,_value,value);_classPrivateFieldSet(this,_value,_classPrivateFieldGet(this,_value)||[]),_classPrivateFieldGet(this,_value).push(value)}else _classPrivateFieldSet(this,_value,value)}get options(){return Array.from(_classPrivateFieldGet(this,_enum))}set options(value){"string"==typeof value&&(value=value.split(",").map(option=>option.trim())),_classPrivateFieldSet(this,_enum,new Set(value))}get aliases(){return Array.from(_classPrivateFieldGet(this,_alias))}get multipleValuesAllowed(){return _classPrivateFieldGet(this,_allowMultipleValues)}hasAlias(alias){return _classPrivateFieldGet(this,_alias).has(alias)}createAlias(){for(let alias of arguments)if(alias instanceof Set&&(alias=Array.from(alias)),Array.isArray(alias))this.createAlias(...alias);else{if("string"!=typeof alias)throw new Error(`Cannot create an alias for a ${typeof alias} element. Please specify a string instead.`);_classPrivateFieldGet(this,_alias).add(alias.replace(/^-+/gi,""))}}allowMultipleValues(){_classPrivateFieldGet(this,_allowMultipleValues)||(null!==_classPrivateFieldGet(this,_value)&&_classPrivateFieldSet(this,_value,[_classPrivateFieldGet(this,_value)]),null!==_classPrivateFieldGet(this,_default)&&_classPrivateFieldSet(this,_default,[_classPrivateFieldGet(this,_default)]),_classPrivateFieldSet(this,_allowMultipleValues,!0))}preventMultipleValues(){_classPrivateFieldGet(this,_allowMultipleValues)&&(null!==_classPrivateFieldGet(this,_value)&&_classPrivateFieldSet(this,_value,_classPrivateFieldGet(this,_value).pop()),null!==_classPrivateFieldGet(this,_default)&&_classPrivateFieldSet(this,_default,_classPrivateFieldGet(this,_default).pop()),_classPrivateFieldSet(this,_allowMultipleValues,!1))}}const PARSER=/((-+(?<flag>[^\s\"\']+))(\s+((?<value>[\"\'](?<unquoted_value>((\\\"|\\\')|[^\"\'])+)[\"\']|[^-][^\s]+)))?|(([\"\'](?<quoted_arg>((\\\"|\\\')|[^\"\'])+)[\"\']))|(?<arg>[^\s]+))/gi,BOOLS=new Set(["true","false"]);var _args=new WeakMap,_flags=new WeakMap,_unknownFlags=new WeakMap,_allowUnrecognized=new WeakMap,_violations=new WeakMap,_ignoreTypes=new WeakMap,_aliases=new WeakMap,_validFlags=new WeakMap,_length=new WeakMap,_quotedFlags=new WeakMap,_cleanFlag=new WeakMap,_flagRef=new WeakMap;class Parser{constructor(argList=null,cfg=null){_args.set(this,{writable:!0,value:[]}),_flags.set(this,{writable:!0,value:new Map}),_unknownFlags.set(this,{writable:!0,value:new Map}),_allowUnrecognized.set(this,{writable:!0,value:!0}),_violations.set(this,{writable:!0,value:new Set}),_ignoreTypes.set(this,{writable:!0,value:!1}),_aliases.set(this,{writable:!0,value:new Set}),_validFlags.set(this,{writable:!0,value:null}),_length.set(this,{writable:!0,value:0}),_quotedFlags.set(this,{writable:!0,value:new Set}),_cleanFlag.set(this,{writable:!0,value:flag=>flag.replace(/^-+/g,"").trim().toLowerCase()}),_flagRef.set(this,{writable:!0,value:flag=>this.getFlag(flag)||this.addFlag(flag)}),null===argList||"object"!=typeof argList||Array.isArray(argList)||(cfg=argList,argList=null),null!==cfg&&this.configure(cfg),globalThis.hasOwnProperty("argv")?this.parse(process.argv.slice(2)):null!==argList&&this.parse(argList)}get length(){return _classPrivateFieldGet(this,_length)}get valid(){return _classPrivateFieldSet(this,_validFlags,!0),_classPrivateFieldSet(this,_violations,new Set),_classPrivateFieldGet(this,_flags).forEach((flag,flagname)=>{_classPrivateFieldGet(this,_aliases).has(flagname)||(flag.strictTypes=!_classPrivateFieldGet(this,_ignoreTypes),flag.valid||(_classPrivateFieldSet(this,_validFlags,!1),_classPrivateFieldSet(this,_violations,new Set([..._classPrivateFieldGet(this,_violations),...flag.violations]))),_classPrivateFieldGet(this,_allowUnrecognized)||flag.recognized||(_classPrivateFieldSet(this,_validFlags,!1),_classPrivateFieldGet(this,_violations).add(`"${flagname}" is unrecognized.`)))}),!_classPrivateFieldGet(this,_allowUnrecognized)&&_classPrivateFieldGet(this,_unknownFlags).size>0&&(_classPrivateFieldSet(this,_validFlags,!1),_classPrivateFieldGet(this,_unknownFlags).forEach(flag=>_classPrivateFieldGet(this,_violations).add(`"${flag.name}" is unrecognized.`))),_classPrivateFieldGet(this,_validFlags)}get violations(){return _classPrivateFieldSet(this,_validFlags,_classPrivateFieldGet(this,_validFlags)||this.valid),Array.from(_classPrivateFieldGet(this,_violations))}get unrecognizedFlags(){const result=new Set;return _classPrivateFieldGet(this,_flags).forEach((flag,flagname)=>{_classPrivateFieldGet(this,_aliases).has(flagname)||flag.recognized||result.add(flag.name)}),_classPrivateFieldGet(this,_unknownFlags).forEach(flag=>result.add(flag.name)),Array.from(result)}get recognizedFlags(){const result=new Set;return _classPrivateFieldGet(this,_flags).forEach((flag,flagname)=>{_classPrivateFieldGet(this,_aliases).has(flagname)||flag.recognized&&result.add(flagname)}),Array.from(result)}get flags(){return Array.from(_classPrivateFieldGet(this,_flags).keys()).concat(Array.from(_classPrivateFieldGet(this,_unknownFlags).keys()))}get data(){const data={},sources={};return _classPrivateFieldGet(this,_flags).forEach((flag,name)=>{_classPrivateFieldGet(this,_aliases).has(name)||("boolean"===flag.type&&null===flag.value?data[flag.name]=!1:data[flag.name]=flag.value,Object.defineProperty(sources,flag.name,{enumerable:!0,get:()=>flag}))}),_classPrivateFieldGet(this,_unknownFlags).forEach((flag,name)=>{let unknownName=flag.name,count=0;for(;data.hasOwnProperty(unknownName);)count++,unknownName=`${unknownName}${count}`;data[unknownName]=null===flag.value||flag.value,Object.defineProperty(sources,unknownName,{enumerable:!0,get:()=>flag})}),Object.defineProperty(data,"flagSource",{enumerable:!1,writable:!1,configurable:!1,value:sources}),data}configure(config={}){for(const[name,cfg]of Object.entries(config))cfg.name=name,this.addFlag(cfg).recognized=!0}parse(input){if(!input)return;input=Array.isArray(input)?input.join(" "):input;const args=[],flags=[];Array.from([...input.matchAll(PARSER)]).forEach(parsedArg=>{let{flag:flag,value:value,unquoted_value:unquoted_value,quoted_arg:quoted_arg,arg:arg}=parsedArg.groups;arg?args.push(arg):quoted_arg?(args.push(quoted_arg),_classPrivateFieldGet(this,_quotedFlags).add(_classPrivateFieldGet(this,_cleanFlag).call(this,quoted_arg))):(value=unquoted_value||value,value=void 0===value||value,"string"==typeof value&&BOOLS.has(value.toLowerCase())&&(value="true"===value.toLowerCase()),flags.push({flag:flag,value:value}))}),_classPrivateFieldSet(this,_length,flags.length+args.length);for(const arg of flags){let ref=_classPrivateFieldGet(this,_flagRef).call(this,arg.flag);ref.aliasOf&&(ref=ref.aliasOf),ref.value=arg.value}for(const arg of args)if(this.exists(arg)){const uflag=new Flag(_classPrivateFieldGet(this,_cleanFlag).call(this,arg));uflag.strictTypes=!_classPrivateFieldGet(this,_ignoreTypes),_classPrivateFieldGet(this,_unknownFlags).set(_classPrivateFieldGet(this,_cleanFlag).call(this,arg),uflag)}else this.addFlag(arg).value=!0;_classPrivateFieldGet(this,_flags).forEach((flag,name)=>{if(_classPrivateFieldGet(this,_aliases).has(name)&&(void 0===flag.value||flag.aliasOf.multipleValuesAllowed||(flag.aliasOf.value=flag.value)),typeof flag.value!==flag.type&&"boolean"===flag.type)if(null===flag.value)flag.value=!1;else{const unknownFlag=new Flag(_classPrivateFieldGet(this,_cleanFlag).call(this,"unknown"+(_classPrivateFieldGet(this,_unknownFlags).size+1)));unknownFlag.strictTypes=!_classPrivateFieldGet(this,_ignoreTypes),unknownFlag.value=flag.value,_classPrivateFieldGet(this,_unknownFlags).has(unknownFlag.name)||_classPrivateFieldGet(this,_unknownFlags).set(unknownFlag.name,unknownFlag),flag.value=!0}})}getFlag(flag){return _classPrivateFieldGet(this,_flags).get(_classPrivateFieldGet(this,_cleanFlag).call(this,flag))||_classPrivateFieldGet(this,_unknownFlags).get(_classPrivateFieldGet(this,_cleanFlag).call(this,flag))}addFlag(cfg){cfg="object"==typeof cfg?cfg:{name:cfg};const preclean=_classPrivateFieldGet(this,_cleanFlag).call(this,cfg.name),clean=_classPrivateFieldGet(this,_quotedFlags).has(preclean)?cfg.name:preclean;if(_classPrivateFieldGet(this,_flags).has(clean))throw new Error(`"${cfg.name}" flag already exists.`);const flag=new Flag(cfg);return flag.strictTypes=!_classPrivateFieldGet(this,_ignoreTypes),_classPrivateFieldGet(this,_flags).set(clean,flag),flag.aliases.length>0&&flag.aliases.forEach(alias=>{_classPrivateFieldGet(this,_flags).set(_classPrivateFieldGet(this,_cleanFlag).call(this,alias),{aliasOf:_classPrivateFieldGet(this,_flags).get(clean)}),_classPrivateFieldGet(this,_aliases).add(_classPrivateFieldGet(this,_cleanFlag).call(this,alias))}),_classPrivateFieldGet(this,_flags).get(clean)}exists(flag){return _classPrivateFieldGet(this,_flags).has(_classPrivateFieldGet(this,_cleanFlag).call(this,flag))||_classPrivateFieldGet(this,_unknownFlags).has(_classPrivateFieldGet(this,_cleanFlag).call(this,flag))}typeof(flag){return this.exists(flag)?this.getFlag(flag).type:_classPrivateFieldGet(this,_unknownFlags).has(_classPrivateFieldGet(this,_cleanFlag).call(this,flag))?"boolean":"undefined"}value(flag=null){return this.exists(flag)?this.getFlag(flag).value:!!_classPrivateFieldGet(this,_unknownFlags).has(_classPrivateFieldGet(this,_cleanFlag).call(this,flag))||void 0}getFlagAliases(flag){return this.exists(flag)?new Set(this.getFlag(flag).aliases):new Set}require(){Array.from(arguments).forEach(arg=>{if(!_classPrivateFieldGet(this,_aliases).has(arg)){const flag=_classPrivateFieldGet(this,_flagRef).call(this,arg);flag.required=!0,flag.recognized=!0}})}recognize(){Array.from(arguments).forEach(arg=>{this.getFlag(arg)||(this.addFlag(arg).recognized=!0)})}disallowUnrecognized(){_classPrivateFieldSet(this,_allowUnrecognized,!1)}allowUnrecognized(){_classPrivateFieldSet(this,_allowUnrecognized,!0)}ignoreDataTypes(){_classPrivateFieldSet(this,_ignoreTypes,!1),_classPrivateFieldGet(this,_flags).forEach((flag,name)=>{flag.strictTypes=!1,_classPrivateFieldGet(this,_flags).set(name,flag)})}enforceDataTypes(){_classPrivateFieldSet(this,_ignoreTypes,!0),_classPrivateFieldGet(this,_flags).forEach((flag,name)=>{flag.strictTypes=!0,_classPrivateFieldGet(this,_flags).set(name,flag)})}defaults(obj={}){for(const[name,value]of Object.entries(obj)){const flag=_classPrivateFieldGet(this,_flagRef).call(this,name);flag.default=value,flag.recognized=!0}}alias(obj={}){for(const[flagname,alias]of Object.entries(obj)){const flag=_classPrivateFieldGet(this,_flagRef).call(this,flagname);if(_classPrivateFieldGet(this,_aliases).has(alias)&&flagname.toLowerCase()!==flag.name.toLowerCase())throw new Error(`The "${alias}" alias is already associated to the "${this.getFlag(alias).name}" flag.`);flag.hasAlias(alias)||flag.createAlias.apply(flag,alias),flag.recognized=!0}}allowMultipleValues(){for(const flag of arguments)_classPrivateFieldGet(this,_flagRef).call(this,flag).allowMultipleValues()}preventMultipleValues(){for(const flag of arguments)_classPrivateFieldGet(this,_flagRef).call(this,flag).preventMultipleValues()}setOptions(){if(arguments.length<2)throw new Error("setOptions method requires the flag name and at least one value (i.e. minimum 2 arguments).");const enums=Array.from(arguments),flag=_classPrivateFieldGet(this,_flagRef).call(this,enums.shift());flag.recognized=!0,flag.options=enums}describe(flag,desc){_classPrivateFieldGet(this,_flagRef).call(this,flag).description=desc}description(flagname){const flag=this.getFlag(flagname);return flag?flag.description:"undefined"}enforceRules(){if(_classPrivateFieldSet(this,_validFlags,this.valid),!_classPrivateFieldGet(this,_validFlags)){if(globalThis.hasOwnProperty("process"))return console.error("InvalidFlags: Process exited with error.\n * "+this.violations.join("\n * ")),globalThis.process.exit(1);throw new Error("InvalidFlags: Process exited with error.")}return _classPrivateFieldGet(this,_validFlags)}}const DefaultArgumentParser=new Parser;export default DefaultArgumentParser;export{Flag,Parser};
//# sourceMappingURL=../arg-debug/index.js.map
